<?php

/**
 * Class Felix_Arntz\WP_OOP_Plugin_Lib\Dependencies\Style_Registry
 *
 * @since n.e.x.t
 * @package wp-oop-plugin-lib
 */
namespace Felix_Arntz\AI_Services_Dependencies\Felix_Arntz\WP_OOP_Plugin_Lib\Dependencies;

use Felix_Arntz\AI_Services_Dependencies\_WP_Dependency;
use Felix_Arntz\AI_Services_Dependencies\Felix_Arntz\WP_OOP_Plugin_Lib\Dependencies\Contracts\With_Inline_Code;
/**
 * Class for a registry of stylesheets.
 *
 * @since n.e.x.t
 */
class Style_Registry extends Abstract_Dependency_Registry implements With_Inline_Code
{
    /**
     * Registers a stylesheet with the given handle and arguments.
     *
     * @since n.e.x.t
     *
     * @param string               $key  Stylesheet handle.
     * @param array<string, mixed> $args {
     *     Stylesheet registration arguments.
     *
     *     @type string|false      $src      Full URL of the stylesheet, or false if it is an alias or it is used
     *                                       purely for inline styles. Default false.
     *     @type array             $deps     An array of registered stylesheet handles this stylesheet depends on.
     *                                       Default empty array.
     *     @type string|false|null $ver      String specifying stylesheet version number, if it has one, which is added
     *                                       to the URL as a query string for cache busting purposes. If set to false,
     *                                       the current WordPress version number is automatically added. If set to
     *                                       null, no version is added. Default false.
     *     @type string            $media    The media for which this stylesheet has been defined. Default 'all'.
     *     @type string            $manifest Full path of a PHP file which returns arguments for the stylesheet, such
     *                                       as the '*.asset.php' files generated by the '@wordpress/scripts' package.
     *                                       If provided, the returned arguments will be used to register the
     *                                       stylesheet. Default empty string (none).
     *     @type string            $path     Full path the stylesheet. This allows for it to be conditionally inlined
     *                                       for better performance and automatically supports loading the RTL version
     *                                       of the stylesheet (using '-rtl.css' suffix instead of '.css'), if present.
     *                                       Default empty string (none).
     * }
     * @return bool True on success, false on failure.
     */
    public function register(string $key, array $args) : bool
    {
        $args = $this->parse_args($args);
        $success = wp_register_style($key, $args['src'], $args['deps'], $args['ver'], $args['media']);
        if ($success && $args['path']) {
            // Allow conditionally inlining the stylesheet for better performance.
            wp_style_add_data($key, 'path', $args['path']);
            // Handle RTL version of the stylesheet, if present.
            $rtl_file_path = \str_replace('.css', '-rtl.css', $args['path']);
            if (\file_exists($rtl_file_path)) {
                wp_style_add_data($key, 'rtl', 'replace');
                if (is_rtl()) {
                    wp_style_add_data($key, 'path', $rtl_file_path);
                }
            }
        }
        return $success;
    }
    /**
     * Checks whether a stylesheet with the given handle is registered.
     *
     * @since n.e.x.t
     *
     * @param string $key Stylesheet handle.
     * @return bool True if the stylesheet is registered, false otherwise.
     */
    public function is_registered(string $key) : bool
    {
        return wp_style_is($key, 'registered');
    }
    /**
     * Gets the registered stylesheet for the given handle from the registry.
     *
     * @since n.e.x.t
     *
     * @param string $key Stylesheet handle.
     * @return _WP_Dependency|null The registered stylesheet definition, or `null` if not registered.
     */
    public function get_registered(string $key)
    {
        $wp_styles = wp_styles();
        return $wp_styles->registered[$key] ?? null;
    }
    /**
     * Gets all stylesheets from the registry.
     *
     * @since n.e.x.t
     *
     * @return array<string, _WP_Dependency> Associative array of handles and their stylesheet definitions, or empty
     *                                       array if nothing is registered.
     */
    public function get_all_registered() : array
    {
        return wp_styles()->registered;
    }
    /**
     * Enqueues the stylesheet with the given handle.
     *
     * @since n.e.x.t
     *
     * @param string $key Stylesheet handle.
     */
    public function enqueue(string $key) : void
    {
        wp_enqueue_style($key);
    }
    /**
     * Dequeues the stylesheet with the given handle.
     *
     * @since n.e.x.t
     *
     * @param string $key Stylesheet handle.
     */
    public function dequeue(string $key) : void
    {
        wp_dequeue_style($key);
    }
    /**
     * Checks whether the stylesheet with the given handle is enqueued.
     *
     * @since n.e.x.t
     *
     * @param string $key Stylesheet handle.
     * @return bool True if the stylesheet is enqueued, false otherwise.
     */
    public function is_enqueued(string $key) : bool
    {
        return wp_style_is($key, 'enqueued');
    }
    /**
     * Adds inline code to the stylesheet with the given handle.
     *
     * @since n.e.x.t
     *
     * @param string $key  Stylesheet handle.
     * @param string $code CSS code to inline after the stylesheet output.
     * @return bool True on success, false on failure.
     */
    public function add_inline_code(string $key, string $code) : bool
    {
        return wp_add_inline_style($key, $code);
    }
    /**
     * Returns defaults to parse stylesheet arguments with.
     *
     * The keys 'src' and 'deps' do not need to be included as they are universal defaults for any dependency type.
     *
     * @since n.e.x.t
     *
     * @return array<string, mixed> Stylesheet registration defaults.
     */
    protected function get_additional_args_defaults() : array
    {
        return array('ver' => \false, 'media' => 'all', 'path' => '');
    }
}
